plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenCentral()
}

def allureVersion = '2.16.1',
    selenideVersion = "5.25.0",
    junitVersion = '5.8.2'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    //noinspection GradlePackageUpdate
    testImplementation('org.aspectj:aspectjweaver:1.9.7',
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "com.github.javafaker:javafaker:1.0.2",
            "org.assertj:assertj-core:3.21.0",
            "commons-io:commons-io:2.11.0",
            "com.codeborne:pdf-test:1.7.0",
            "com.codeborne:xls-test:1.2",
            "com.opencsv:opencsv:5.5.2",
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly('org.slf4j:slf4j-simple:1.7.33',
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = 11
    targetCompatibility = 11
}

tasks.withType(Test) {
    systemProperty("remoteURL", System.getProperty("remoteURL", ""))
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += ['junit.jupiter.execution.parallel.enabled'                 : true,
                             'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                             'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                             'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                             'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task high_priority_tests(type: Test) {
    systemProperty("remoteURL", System.getProperty("remoteURL", ""))
    useJUnitPlatform {
        includeTags "Critical"
        includeTags "Highest"
        includeTags "Blocker"
        includeTags "High"
    }
}

task web_test(type: Test) {
    systemProperty("remoteURL", System.getProperty("remoteURL", ""))
    useJUnitPlatform {
        includeTags "Web"
    }
}
